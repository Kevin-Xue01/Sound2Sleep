# '''
# GUI for running the Closed Loop Auditory Stimulation experiment
# Author: Simeon Wong
# '''

# import sys
# import traceback

# # Qt Framework
# from typing import Callable
# from PyQt5 import QtWidgets, uic
# from PyQt5.QtCore import QRunnable, QTimer, Qt, QThreadPool, QPoint
# from PyQt5.QtGui import QPainter, QColor, QBrush, QPen, QStaticText
# from PyQt5.QtWidgets import QComboBox, QDateTimeEdit, QWidget, QFileDialog
# import qdarkstyle

# import os
# import io
# import json
# import struct
# import time
# from enum import Enum
# from typing import Optional
# import logging
# import psutil
# import yaml

# # Plot stuff
# import matplotlib, matplotlib.figure
# import matplotlib.pyplot as plt
# from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg

# # Math stuff
# import numpy as np

# # CLAS algorithm
# import QCLASAlgo

# # Misc
# import datetime

# # for Pushover
# import requests
# import yaml


# class Main(QtWidgets.QMainWindow):
#     def __init__(self, parent: QWidget | None = ..., flags: Qt.WindowFlags | Qt.WindowType = ...) -> None:
#         super().__init__(parent, flags)

# if __name__ == "__main__":
#     App = QtWidgets.QApplication(sys.argv)
#     window = Main()
#     sys.exit(App.exec())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_ui_file.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import time
import numpy as np
import pyqtgraph as pg
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
from PyQt5.QtCore import QThreadPool, QRunnable, pyqtSignal, QObject
from pylsl import StreamInlet, resolve_stream

class DataSignal(QObject):
    update_data = pyqtSignal(np.ndarray, np.ndarray)  # Emit a tuple of (data, timestamp)

class IngestEEGDataTask(QRunnable):
    def __init__(self, data_signal: DataSignal):
        super().__init__()
        self.data_signal = data_signal

    def run(self):
        """Ingest EEG data from LSL in a background thread."""
        streams = resolve_stream('type', 'EEG')  # Find EEG stream
        inlet = StreamInlet(streams[0])
        initial_time = None
        while True:
            data, times = inlet.pull_chunk()
            if len(times) > 0:
                if initial_time == None: initial_time = times[0]
                self.data_signal.update_data.emit(np.array(data), np.array(times) - initial_time)
            time.sleep(0.05)

class EEGApp(QMainWindow):
    MAX_BUFFER_SIZE = 1000  # Define the maximum buffer size

    def __init__(self):
        super().__init__()

        # Set up the main window
        self.setWindowTitle('Real-time EEG Viewer')
        self.setGeometry(100, 100, 800, 600)

        # Create a central widget and set the layout for the 4 graphs
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # Create 4 time series plots using pyqtgraph
        self.plots = []
        self.curves = []
        self.plot_data = [[] for _ in range(4)]  # To hold data for each channel
        self.time_data = [[] for _ in range(4)]  # Time data for each channel

        for i in range(4):
            plot = pg.PlotWidget(title=f"EEG Channel {i + 1}")  # Create a new plot for each channel
            self.plots.append(plot)
            self.layout.addWidget(plot)  # Add plot to the vertical layout
            curve = plot.plot([], pen=pg.mkPen('w'))  # Initialize the plot line with an empty array
            self.curves.append(curve)

        # Create a data signal for GUI updates
        self.data_signal = DataSignal()
        self.data_signal.update_data.connect(self.update_gui)

        # Create a QThreadPool
        self.threadpool = QThreadPool()

        # Start the background task to ingest EEG data
        self.start_ingestion_task()

        self.show()

    def start_ingestion_task(self):
        """Start the LSL data ingestion task using QThreadPool."""
        ingest_task = IngestEEGDataTask(self.data_signal)
        self.threadpool.start(ingest_task)

    def update_gui(self, data: np.ndarray, times: np.ndarray):
        for i in range(4):
            self.plot_data[i].extend(data[:, i].tolist())
            self.time_data[i].extend(times.tolist())
            
            # Check if we exceed the maximum buffer size
            if len(self.plot_data[i]) > self.MAX_BUFFER_SIZE:
                # Remove the oldest samples
                self.plot_data[i] = self.plot_data[i][-self.MAX_BUFFER_SIZE:] # Remove the first element (oldest data point)
                self.time_data[i] = self.time_data[i][-self.MAX_BUFFER_SIZE:]  # Remove the corresponding timestamp

            # Update the plot curve using time data for x-axis
            self.curves[i].setData(self.time_data[i], self.plot_data[i])  # Update the plot curve

def main():
    app = QApplication(sys.argv)
    eeg_app = EEGApp()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()